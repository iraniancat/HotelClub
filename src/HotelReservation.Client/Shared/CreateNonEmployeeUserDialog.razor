@* مسیر پیشنهادی: src/HotelReservation.Client/Shared/CreateNonEmployeeUserDialog.razor *@
@inject IApiClientService ApiClient
@inject ISnackbar Snackbar
@inject ILogger<CreateNonEmployeeUserDialog> Logger

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="me-3"/> ایجاد کاربر غیرسازمانی جدید
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            <MudText Class="ml-2">در حال بارگذاری اطلاعات اولیه...</MudText>
        }
        else
        {
            <MudForm @ref="_form" @bind-IsValid="_isFormValid" Model="@_createUserModel">
                <DataAnnotationsValidator />
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" Label="شناسه کاربری سیستم (نام کاربری)" @bind-Value="_createUserModel.SystemUserId"
                                      For="@(() => _createUserModel.SystemUserId)" Required="true" RequiredError="شناسه کاربری الزامی است." />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" Label="نام کامل" @bind-Value="_createUserModel.FullName"
                                      For="@(() => _createUserModel.FullName)" Required="true" RequiredError="نام کامل الزامی است." />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                         <MudTextField T="string" Label="رمز عبور" @bind-Value="_createUserModel.Password"
                                      For="@(() => _createUserModel.Password)" Required="true" RequiredError="رمز عبور الزامی است."
                                      InputType="_isPasswordVisible ? InputType.Text : InputType.Password"
                                      Adornment="Adornment.End" AdornmentIcon="@(_isPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                      OnAdornmentClick="() => _isPasswordVisible = !_isPasswordVisible" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" Label="تکرار رمز عبور" @bind-Value="_createUserModel.ConfirmPassword"
                                      For="@(() => _createUserModel.ConfirmPassword)" Required="true" RequiredError="تکرار رمز عبور الزامی است."
                                      InputType="InputType.Password" />
                    </MudItem>
                     <MudItem xs="12" sm="6">
                        <MudSelect T="Guid" Label="نقش"
                                   Value="_createUserModel.RoleId"
                                   ValueChanged="OnRoleSelectionChanged"
                                   For="@(() => _createUserModel.RoleId)"
                                   Required="true" RequiredError="انتخاب نقش الزامی است.">
                            @foreach (var role in _roles)
                            {
                                <MudSelectItem Value="@role.Id">@role.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" Label="کد ملی (اختیاری)" @bind-Value="_createUserModel.NationalCode"
                                      For="@(() => _createUserModel.NationalCode)" />
                    </MudItem>
                    @if (_showHotelSelection)
                    {
                        <MudItem xs="12">
                            <MudSelect T="Guid?" Label="هتل" @bind-Value="_createUserModel.HotelId" For="@(() => _createUserModel.HotelId)"
                                       Required="true" RequiredError="برای نقش کاربر هتل، انتخاب هتل الزامی است.">
                                @foreach (var hotel in _hotels)
                                {
                                    <MudSelectItem Value="@((Guid?)hotel.Id)">@hotel.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                    <MudItem xs="12">
                        <MudSwitch @bind-Checked="_createUserModel.IsActive" Color="Color.Primary">وضعیت فعال باشد</MudSwitch>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">انصراف</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitAsync" Disabled="!_isFormValid || _isProcessing || _isLoading">
            @if (_isProcessing)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                <MudText Class="ms-2">در حال ایجاد کاربر...</MudText>
            }
            else
            {
                <MudText>ایجاد کاربر</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private class CreateUserWithConfirmPasswordDto : CreateNonEmployeeUserDto
    {
        [Compare(nameof(Password), ErrorMessage = "رمز عبور و تکرار آن باید یکسان باشند.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private CreateUserWithConfirmPasswordDto _createUserModel = new();
    private MudForm? _form;
    private bool _isFormValid;
    private bool _isProcessing = false;
    private bool _isLoading = true;
    private bool _isPasswordVisible;

    private List<RoleDto> _roles = new();
    private List<HotelDto> _hotels = new();
    private bool _showHotelSelection = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadInitialDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add("خطا در بارگذاری اطلاعات اولیه برای فرم.", Severity.Error);
            Logger.LogError(ex, "Failed to load initial data for CreateNonEmployeeUserDialog.");
            Cancel(); 
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadInitialDataAsync()
{
    try
    {
        // بارگذاری داده‌ها به صورت متوالی به جای همزمان
        var rolesResult = await ApiClient.GetListAsync<RoleDto>("api/roles");
        if (rolesResult != null)
        {
            // نقش کارمند عادی را از لیست حذف می‌کنیم چون نباید به صورت دستی تخصیص داده شود
            _roles = rolesResult.Where(r => r.Name != "Employee").ToList();
        }

        var hotelsResult = await ApiClient.GetListAsync<HotelDto>("api/hotels/all");
        if (hotelsResult != null)
        {
            _hotels = hotelsResult.ToList();
        }

        // فقط برای دیالوگ تخصیص نقش و ویرایش کاربر (اگر از استان‌ها استفاده می‌کند)
        // var provincesResult = await ApiClient.GetListAsync<ProvinceDto>("api/provinces");
        // if (provincesResult != null)
        // {
        //     _provinces = provincesResult.ToList();
        // }
    }
    catch (Exception ex)
    {
        // این بخش لاگ خطا را بدون تغییر نگه می‌داریم
        Snackbar.Add("خطا در بارگذاری اطلاعات اولیه برای فرم.", Severity.Error);
        Logger.LogError(ex, "Failed to load initial data for the dialog.");
        Cancel(); // بستن دیالوگ در صورت بروز خطای جدی
    }
}

    private void OnRoleSelectionChanged(Guid selectedRoleId)
    {
        _createUserModel.RoleId = selectedRoleId;
        var selectedRole = _roles.FirstOrDefault(r => r.Id == selectedRoleId);
        if (selectedRole != null && selectedRole.Name.Equals("HotelUser", StringComparison.OrdinalIgnoreCase))
        {
            _showHotelSelection = true;
        }
        else
        {
            _showHotelSelection = false;
            _createUserModel.HotelId = null; 
        }
    }

    private async Task SubmitAsync()
    {
        await _form!.Validate();
        if (!_isFormValid)
        {
            Snackbar.Add("لطفاً خطاهای فرم را برطرف نمایید.", Severity.Warning);
            return;
        }

        _isProcessing = true;
        try
        {
            var dtoToSend = new CreateNonEmployeeUserDto
            {
                SystemUserId = _createUserModel.SystemUserId,
                FullName = _createUserModel.FullName,
                Password = _createUserModel.Password,
                RoleId = _createUserModel.RoleId,
                IsActive = _createUserModel.IsActive,
                NationalCode = _createUserModel.NationalCode,
                ProvinceCode = _createUserModel.ProvinceCode,
                DepartmentCode = _createUserModel.DepartmentCode,
                HotelId = _createUserModel.HotelId
            };
            
            await ApiClient.PostAsync<CreateNonEmployeeUserDto, object>($"api/management/users", dtoToSend);
            
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApplicationException ex)
        {
            Snackbar.Add($"خطا: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add("خطای پیش‌بینی نشده در هنگام ایجاد کاربر رخ داد.", Severity.Error);
            Logger.LogError(ex, "Unexpected error creating non-employee user.");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    void Cancel() => MudDialog.Cancel();
}
