@page "/hotel/bookings"
@attribute [Authorize(Roles = "SuperAdmin, HotelUser")]

@inject IApiClientService ApiClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILogger<HotelBookings> Logger
@using System.Globalization

<PageTitle>لیست درخواست‌های رزرو هتل</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudPaper Class="pa-4" Elevation="3">
        <MudToolBar Class="mb-4">
            <MudText Typo="Typo.h5">لیست درخواست‌های رزرو</MudText>
            <MudSpacer />
        </MudToolBar>

        <MudTable ServerData="@(new Func<TableState, Task<TableData<BookingRequestSummaryDto>>>(ServerReload))"
                  Dense="true" Hover="true" Striped="true" @ref="_table"
                  Loading="@_isLoading" LoadingProgressColor="Color.Primary">
            <ToolBarContent>
                <MudGrid Spacing="2" Justify="Justify.FlexEnd">
                    <MudItem xs="12" sm="6" md="5">
                        <MudTextField T="string" ValueChanged="OnSearch" Placeholder="جستجو (کد رهگیری، نام کارمند...)" 
                                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                                      IconSize="Size.Medium" DebounceInterval="500" Clearable="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="string" Label="فیلتر بر اساس وضعیت" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" 
                                   ValueChanged="OnStatusFilterChanged" Clearable="true">
                            @foreach (var status in Enum.GetValues<HotelReservation.Domain.Enums.BookingStatus>())
                            {
                                <MudSelectItem Value="@status.ToString()">@GetPersianStatus(status)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>کد رهگیری</MudTh>
                <MudTh>کارمند</MudTh>
                <MudTh>تاریخ ورود</MudTh>
                <MudTh>تاریخ خروج</MudTh>
                <MudTh>تعداد مهمانان</MudTh>
                <MudTh>وضعیت</MudTh>
                <MudTh Style="text-align:center;">عملیات</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="کد رهگیری">
                    <MudChip Size="Size.Small" Color="Color.Default">@context.TrackingCode</MudChip>
                </MudTd>
                <MudTd DataLabel="کارمند">@context.RequestingEmployeeFullName</MudTd>
                <MudTd DataLabel="تاریخ ورود">@ToPersianDateString(context.CheckInDate)</MudTd>
                <MudTd DataLabel="تاریخ خروج">@ToPersianDateString(context.CheckOutDate)</MudTd>
                <MudTd DataLabel="تعداد مهمانان">@context.TotalGuests</MudTd>
                <MudTd DataLabel="وضعیت">
                    <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">@GetPersianStatus(context.Status)</MudChip>
                </MudTd>
                <MudTd Style="text-align:center">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Variant="Variant.Filled" Color="Color.Default" Size="Size.Small" 
                                   OnClick="@(() => ViewDetails(context.Id))" Title="مشاهده جزئیات و مدیریت" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100}" />
            </PagerContent>
            <NoRecordsContent>
                <MudText>درخواستی برای نمایش یافت نشد.</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </LoadingContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private MudTable<BookingRequestSummaryDto> _table = new();
    private bool _isLoading = true;
    
    private string? _searchTerm;
    private string? _statusFilter;

    private async Task<TableData<BookingRequestSummaryDto>> ServerReload(TableState state)
    {
        _isLoading = true;
        try
        {
            var requestUri = $"api/booking-requests?pageNumber={state.Page + 1}&pageSize={state.PageSize}";
            if (!string.IsNullOrWhiteSpace(_searchTerm))
                requestUri += $"&searchTerm={Uri.EscapeDataString(_searchTerm)}";
            if (!string.IsNullOrWhiteSpace(_statusFilter))
                requestUri += $"&statusFilter={_statusFilter}";
            
            var pagedResult = await ApiClient.GetAsync<PagedResult<BookingRequestSummaryDto>>(requestUri);
            if (pagedResult != null)
            {
                return new TableData<BookingRequestSummaryDto>() { TotalItems = pagedResult.TotalCount, Items = pagedResult.Items };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در دریافت اطلاعات: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
        return new TableData<BookingRequestSummaryDto>() { TotalItems = 0, Items = new List<BookingRequestSummaryDto>() };
    }

    private void OnSearch(string text)
    {
        _searchTerm = text;
        _table.ReloadServerData(); 
    }

    private Task OnStatusFilterChanged(string? selectedStatus)
    {
        _statusFilter = selectedStatus;
        return _table.ReloadServerData();
    }
    
    private void ViewDetails(Guid bookingId)
    {
        NavigationManager.NavigateTo($"/booking-requests/details/{bookingId}");
    }
    
    private string ToPersianDateString(DateTime dt)
    {
        if (dt == default) return string.Empty;
        var pc = new PersianCalendar();
        return $"{pc.GetYear(dt)}/{pc.GetMonth(dt):D2}/{pc.GetDayOfMonth(dt):D2}";
    }
    
    private string GetPersianStatus(string status)
    {
        if (Enum.TryParse<HotelReservation.Domain.Enums.BookingStatus>(status, true, out var statusEnum))
        {
            return GetPersianStatus(statusEnum);
        }
        return status;
    }

    private string GetPersianStatus(HotelReservation.Domain.Enums.BookingStatus status)
    {
        return status switch
        {
            HotelReservation.Domain.Enums.BookingStatus.Draft => "پیش‌نویس",
            HotelReservation.Domain.Enums.BookingStatus.SubmittedToHotel => "ارسال به هتل",
            HotelReservation.Domain.Enums.BookingStatus.HotelApproved => "تأیید شده",
            HotelReservation.Domain.Enums.BookingStatus.HotelRejected => "رد شده",
            HotelReservation.Domain.Enums.BookingStatus.CancelledByUser => "لغو شده",
            HotelReservation.Domain.Enums.BookingStatus.Completed => "تکمیل شده",
            _ => status.ToString()
        };
    }

    private Color GetStatusColor(string status)
    {
        if (Enum.TryParse<HotelReservation.Domain.Enums.BookingStatus>(status, true, out var statusEnum))
        {
            return statusEnum switch
            {
                HotelReservation.Domain.Enums.BookingStatus.HotelApproved => Color.Success,
                HotelReservation.Domain.Enums.BookingStatus.HotelRejected => Color.Error,
                HotelReservation.Domain.Enums.BookingStatus.CancelledByUser => Color.Warning,
                HotelReservation.Domain.Enums.BookingStatus.SubmittedToHotel => Color.Info,
                _ => Color.Default
            };
        }
        return Color.Default;
    }
}
